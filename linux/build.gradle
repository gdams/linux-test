import net.adoptopenjdk.installer.Architecture
import net.adoptopenjdk.installer.VirtualMachine

buildscript {
    repositories {
        mavenCentral()
        gradlePluginPortal()
    }
}

plugins {
    id "base"
}

allprojects {
    apply plugin: "base"

    version = 1

    repositories {
        mavenCentral()
    }
}

tasks.wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

ext {
    jdkMajorVersion = getJdkMajorVersion()
    jdkVersion = JDK_VERSION
    pkgMetadata = [
        architecture: getJdkArchitecture(),
        vm          : getJdkVirtualMachine(),
        description : "${jdkDistributionType.description} ${jdkMajorVersion} (${jdkDistributionType.name()}) with ${getJdkVirtualMachine().description()} by AdoptOpenJDK",
        homepage    : "https://adoptopenjdk.net/",
        vcsUrl      : "https://github.com/AdoptOpenJDK/openjdk-jdk${jdkMajorVersion}u",
        iteration   : version,
        license     : "GPL-2.0+CE",
        maintainer  : getVendor(),
        vendor      : getVendor()
    ]
    artifactory = [
        url       : "https://adoptopenjdk.jfrog.io/adoptopenjdk/",
        user      : ARTIFACTORY_USER,
        password  : ARTIFACTORY_PASSWORD,
        repository: [
            deb: ARTIFACTORY_REPOSITORY_DEB,
            rpm: ARTIFACTORY_REPOSITORY_RPM
        ],
    ]
    jdkDistributionDir = JDK_DISTRIBUTION_DIR
    jdkDistributionType = getJdkDistributionType()
}

tasks.register("upload") {
    group = "upload"
    description = "Uploads all linux packages"
}

def getJdkDistributionType() {
    return hasProperty("JDK_DISTRIBUTION_TYPE") ?
        DistributionType.valueOf(JDK_DISTRIBUTION_TYPE.toUpperCase(Locale.US)) :
        DistributionType.JDK
}

def getJdkVirtualMachine() {
    return VirtualMachine.valueOf(JDK_VM.toUpperCase(Locale.US))
}

def getJdkArchitecture() {
    return hasProperty("JDK_ARCHITECTURE") ?
        Architecture.valueOf(JDK_ARCHITECTURE.toUpperCase(Locale.US)) :
        Architecture.X64
}

def getJdkMajorVersion() {
    def versionString = hasProperty("JDK_MAJOR_VERSION") ? JDK_MAJOR_VERSION : ""
    if (!versionString.matches("^[0-9]+\$")) {
        throw new IllegalArgumentException("Unparsable JDK major version '$versionString'")
    }
    int version = Integer.valueOf(versionString)

    // Do not change the numbers without updating the metadata declarations
    // (dependencies, jinfo priorities)!
    if (version < 8 || version > 15) {
        throw new IllegalArgumentException("Building packages for JDK $version is not supported")
    }
    return version
}

def getVendor() {
    return hasProperty("VENDOR") ? VENDOR : "AdoptOpenJDK"
}

enum DistributionType {
    JDK("", "OpenJDK Development Kit"),
    JRE("jre", "OpenJDK Runtime Environment")

    private final String suffix

    private final String description

    DistributionType(suffix, description) {
        this.suffix = suffix
        this.description = description
    }

    String getSuffix() {
        return suffix
    }

    String getPkgNameSuffix() {
        if (suffix.empty) {
            return ""
        }

        return "-${this.suffix}"
    }

    String getDescription() {
        return description
    }
}
